/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.lordbogdan;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Album extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7644651995223171808L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Album\",\"namespace\":\"com.lordbogdan\",\"fields\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"artist\",\"type\":[\"string\",\"null\"]},{\"name\":\"year\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence title;
  @Deprecated public java.lang.CharSequence artist;
  @Deprecated public int year;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Album() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param artist The new value for artist
   * @param year The new value for year
   */
  public Album(java.lang.CharSequence title, java.lang.CharSequence artist, java.lang.Integer year) {
    this.title = title;
    this.artist = artist;
    this.year = year;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return artist;
    case 2: return year;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: title = (java.lang.CharSequence)value$; break;
    case 1: artist = (java.lang.CharSequence)value$; break;
    case 2: year = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'artist' field.
   * @return The value of the 'artist' field.
   */
  public java.lang.CharSequence getArtist() {
    return artist;
  }

  /**
   * Sets the value of the 'artist' field.
   * @param value the value to set.
   */
  public void setArtist(java.lang.CharSequence value) {
    this.artist = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Creates a new Album RecordBuilder.
   * @return A new Album RecordBuilder
   */
  public static com.lordbogdan.Album.Builder newBuilder() {
    return new com.lordbogdan.Album.Builder();
  }

  /**
   * Creates a new Album RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Album RecordBuilder
   */
  public static com.lordbogdan.Album.Builder newBuilder(com.lordbogdan.Album.Builder other) {
    return new com.lordbogdan.Album.Builder(other);
  }

  /**
   * Creates a new Album RecordBuilder by copying an existing Album instance.
   * @param other The existing instance to copy.
   * @return A new Album RecordBuilder
   */
  public static com.lordbogdan.Album.Builder newBuilder(com.lordbogdan.Album other) {
    return new com.lordbogdan.Album.Builder(other);
  }

  /**
   * RecordBuilder for Album instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Album>
    implements org.apache.avro.data.RecordBuilder<Album> {

    private java.lang.CharSequence title;
    private java.lang.CharSequence artist;
    private int year;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.lordbogdan.Album.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.artist)) {
        this.artist = data().deepCopy(fields()[1].schema(), other.artist);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.year)) {
        this.year = data().deepCopy(fields()[2].schema(), other.year);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Album instance
     * @param other The existing instance to copy.
     */
    private Builder(com.lordbogdan.Album other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.artist)) {
        this.artist = data().deepCopy(fields()[1].schema(), other.artist);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.year)) {
        this.year = data().deepCopy(fields()[2].schema(), other.year);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.lordbogdan.Album.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.lordbogdan.Album.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist' field.
      * @return The value.
      */
    public java.lang.CharSequence getArtist() {
      return artist;
    }

    /**
      * Sets the value of the 'artist' field.
      * @param value The value of 'artist'.
      * @return This builder.
      */
    public com.lordbogdan.Album.Builder setArtist(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.artist = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'artist' field has been set.
      * @return True if the 'artist' field has been set, false otherwise.
      */
    public boolean hasArtist() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'artist' field.
      * @return This builder.
      */
    public com.lordbogdan.Album.Builder clearArtist() {
      artist = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public java.lang.Integer getYear() {
      return year;
    }

    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.lordbogdan.Album.Builder setYear(int value) {
      validate(fields()[2], value);
      this.year = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.lordbogdan.Album.Builder clearYear() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Album build() {
      try {
        Album record = new Album();
        record.title = fieldSetFlags()[0] ? this.title : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.artist = fieldSetFlags()[1] ? this.artist : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.year = fieldSetFlags()[2] ? this.year : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
